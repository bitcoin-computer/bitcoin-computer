"use strict";var e=require("bitcoin-computer-bitcore");parseInt(process.env.BC_DUST_LIMIT||"",10),parseInt(process.env.BC_DEFAULT_FEE||"",10),parseInt(process.env.BC_SCRIPT_CHUNK_SIZE||"",10);const{PublicKey:t,crypto:o}=e.Bitcoin;const{Point:c}=o;function r(e){return Buffer.from(e).toString("hex")}function n(e){return Buffer.from(e,"hex").toString().replace(/\0/g,"")}function i(e,t){return e.slice(t)+e.slice(0,t)}function f(e,t){return e.slice(-t)+e.slice(0,-t)}function a(e,t,o){if(e.length*Math.log2(t)>53)throw new Error(`Input too large ${e.length} ${Math.log2(t)}`);if(![2,10,16].includes(t)||![2,10,16].includes(o))throw new Error("ToBase or FromBase invalid in covertNumber.");if(2===t&&e.length%8!=0)throw new Error("Binary strings must be byte aligned.");if(16===t&&e.length%2!=0)throw new Error("Hex strings must be of even length.");const c=parseInt(e,t).toString(o);return 2===o?c.padStart(8*Math.ceil(c.length/8),"0"):16===o?c.padStart(2*Math.ceil(c.length/2),"0"):c}function s(e,t){const o=new RegExp(`.{1,${t}}`,"g");return e.match(o)||[]}function p(e){return s(e,2).map((e=>a(e,16,2))).join("")}function x(e){return s(e,8).map((e=>a(e,2,16))).join("")}function u(e){return e.toString(16).padStart(3,"0")}function d(e){return parseInt(e,16)}function h(e){if(62!==e.length)throw new Error("Input to hexToPublicKey must be of length 62");let o=!1;let r=0;let n;for(;!o;){if(r>=256)throw new Error("Something went wrong storing data");const t=r.toString(16).padStart(2,"0")+x(i(p(e).padStart(64,"0"),r));try{n=c.fromX(!1,t),o=!0}catch(e){r+=1}}if(!n)throw new Error("Something went wrong storing data");return new t(n)}function b(e){const t=e.point.getX().toString("hex").padStart(64,"0");const o=a(t.slice(0,2),16,10);const c=parseInt(o,10);return x(f(p(t.slice(2)),c))}describe("utils",(()=>{describe("asciiToHex",(()=>{it("should convert a string to a hex",(()=>{expect(r("aaa")).toBe("616161"),expect(r("111")).toBe("313131"),expect(r("const s1 = 'Ã©'")).toBe("636f6e7374207331203d2027c3a927"),expect(r("Ã©")).toBe("c3a9"),expect(r("ðŸ‘©")).toBe("f09f91a9")})),it("should be the inverse of hexToAscii",(()=>{expect(n(r("aaa"))).toBe("aaa"),expect(n(r("111"))).toBe("111"),expect(n(r("const s1 = 'Ã©'"))).toBe("const s1 = 'Ã©'"),expect(n(r("Ã©"))).toBe("Ã©"),expect(n(r("ðŸ‘©"))).toBe("ðŸ‘©")}))})),describe("hexToAscii",(()=>{it("should convert a hex to a string",(()=>{expect(n("616161")).toBe("aaa"),expect(n("313131")).toBe("111"),expect(n("636f6e7374207331203d2027c3a927")).toBe("const s1 = 'Ã©'"),expect(n("c3a9")).toBe("Ã©"),expect(n("f09f91a9")).toBe("ðŸ‘©")})),it("should be the inverse of asciiToHex",(()=>{expect(r(n("616161"))).toBe("616161"),expect(r(n("313131"))).toBe("313131"),expect(r(n("636f6e7374207331203d2027c3a927"))).toBe("636f6e7374207331203d2027c3a927"),expect(r(n("c3a9"))).toBe("c3a9")}))})),describe("intToHex",(()=>{it("should convert an integer to a hex",(()=>{expect(u(0)).toBe("000"),expect(u(16)).toBe("010"),expect(u(2048)).toBe("800"),expect(u(Number.MAX_SAFE_INTEGER)).toBe("1fffffffffffff"),expect(u(Number.MAX_SAFE_INTEGER+1)).toBe("20000000000000"),expect(u(Number.MAX_VALUE)).toBe("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")})),it("should be the inverse of hexToInt",(()=>{expect(d(u(0))).toBe(0),expect(d(u(16))).toBe(16),expect(d(u(Number.MAX_SAFE_INTEGER))).toBe(Number.MAX_SAFE_INTEGER),expect(d(u(Number.MAX_SAFE_INTEGER+1))).toBe(Number.MAX_SAFE_INTEGER+1),expect(d(u(Number.MAX_VALUE))).toBe(Number.MAX_VALUE)}))})),describe("hexToInt",(()=>{it("should convert a hex to an integer",(()=>{expect(d("0")).toBe(0),expect(d("10")).toBe(16),expect(d("ff")).toBe(255),expect(d("fff")).toBe(4095),expect(d("ffff")).toBe(65535),expect(d("1fffffffffffff")).toBe(Number.MAX_SAFE_INTEGER),expect(d("20000000000000")).toBe(Number.MAX_SAFE_INTEGER+1),expect(d("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")).toBe(Number.MAX_VALUE)})),it("should be the inverse of hexToInt",(()=>{expect(u(d("0"))).toBe("000"),expect(u(d("10"))).toBe("010"),expect(u(d("1fffffffffffff"))).toBe("1fffffffffffff"),expect(u(d("20000000000000"))).toBe("20000000000000"),expect(u(d("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))).toBe("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")}))})),describe("rotateRight",(()=>{it("should rotate a string",(()=>{expect(i("abcde",2)).toBe("cdeab"),expect(i("abcde",5)).toBe("abcde"),expect(i("abcde",0)).toBe("abcde"),expect(i("73b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c9c",2)).toBe("b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c9c73")})),it("should be the inverse of rotateLeft",(()=>{const e="abcdefg";expect(f(i(e,3),3)).toBe(e)}))})),describe("rotateLeft",(()=>{it("should rotate a string",(()=>{expect(f("abcde",2)).toBe("deabc"),expect(f("abcde",5)).toBe("abcde"),expect(f("abcde",0)).toBe("abcde"),expect(f("73b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c9c",2)).toBe("9c73b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c")})),it("should be the inverse of rotateRight",(()=>{const e="abcdefg";expect(i(f(e,3),3)).toBe(e)}))})),describe("convertNumber",(()=>{it("should convert a binary string to hex",(()=>{expect(a("00000001",2,16)).toBe("01"),expect(a("00000011",2,16)).toBe("03"),expect(a("00000111",2,16)).toBe("07"),expect(a("00001111",2,16)).toBe("0f"),expect(a("00010000",2,16)).toBe("10")})),it("should convert a hex string to binary",(()=>{expect(a("01",16,2)).toBe("00000001"),expect(a("03",16,2)).toBe("00000011"),expect(a("07",16,2)).toBe("00000111"),expect(a("0f",16,2)).toBe("00001111"),expect(a("10",16,2)).toBe("00010000")})),it("should be able to compute the inverse",(()=>{const e="10";const t=a(e,16,2);expect(t).toBe("00010000"),expect(a(a(e,16,2),2,16)).toBe(e)})),it("should be able to compute the inverse of a large number",(()=>{const e="f".repeat(12);expect(a(a(e,16,2),2,16)).toBe(e)})),it("should throw an error if the input is too large",(()=>{const e="f".repeat(14);expect((()=>a(e,16,2))).toThrow()}))})),describe("hexToBin",(()=>{it("should convert a hex string to a binary string",(()=>{expect(p("01")).toBe("00000001"),expect(p("03")).toBe("00000011"),expect(p("07")).toBe("00000111"),expect(p("0f")).toBe("00001111"),expect(p("10")).toBe("00010000"),expect(p("f".repeat(14))).toBe("1".repeat(56))}))})),describe("binToHex",(()=>{it("should convert a binary string to a hex string",(()=>{expect(x("00000001")).toBe("01"),expect(x("00000011")).toBe("03"),expect(x("00000111")).toBe("07"),expect(x("00001111")).toBe("0f"),expect((()=>x("1"))).toThrow("Binary strings must be byte aligned.")}))})),describe("chunkString",(()=>{it("should split up an array",(()=>{expect(s("1234567",2)).toEqual(["12","34","56","7"]),expect(s("",2)).toEqual([])}))})),describe("chunkArray",(()=>{it("should split up an array",(()=>{expect(function(e,t){const o=[];for(let t=0;t<e.length;t+=2)o.push(e.slice(t,t+2));return o}([1,2,3,4,5,6,7])).toEqual([[1,2],[3,4],[5,6],[7]])}))})),describe("hexToPublicKey",(()=>{it("should convert a hex string to a public key without shifting",(()=>{const e=h(r("1").padStart(62,"0"));expect(e).toBeDefined()})),it("should convert a hex string to a public key with shifting",(()=>{const e=h(r("11").padStart(62,"0"));expect(e).toBeDefined()})),it("should throw an error if the input is not of length 62",(()=>{expect((()=>h("1"))).toThrow("Input to hexToPublicKey must be of length 62")}))})),describe("publicKeyToHex",(()=>{it("should work with a publicKeyToHex without rotating",(()=>{const e=r("11").padStart(62,"0");const t=b(h(e));expect(t).toBe(e)})),it("should work with a publicKeyToHex with rotating",(()=>{const e="1".padStart(62,"0");const t=b(h(e));expect(t).toBe(e)})),it("should work with a random input",(()=>{const e=(e=>{let t="";const o="abcdef0123456789";for(let e=0;e<62;e+=1)t+=o.charAt(Math.floor(Math.random()*o.length));return t})();const t=b(h(e));expect(t).toBe(e)})),it("should perform round trip between ascii and a public key",(()=>{const e="qwerty";const t=n(b(h(r(e).padStart(62,"0"))));expect(t).toStrictEqual(e)})),it("should perform round trip between ascii and a public key",(()=>{const e="5b7b2261223a317d5d";const t=n(b(h(r(e).padStart(62,"0"))));expect(t).toStrictEqual(e)}))}))}));
