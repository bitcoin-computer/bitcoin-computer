"use strict";var e=require("chai");var t=require("bitcoin-computer-bitcore");require("child_process");var c=process.env.CHAIN||"LTC",r=process.env.NETWORK||"testnet";process.env.BCN_URL,process.env.RPC_USER,process.env.RPC_PASSWORD,parseInt(process.env.BC_DUST_LIMIT||"",10),parseInt(process.env.BC_DEFAULT_FEE||"",10),parseInt(process.env.BC_SCRIPT_CHUNK_SIZE||"",10);const{PublicKey:n,Mnemonic:o,crypto:i}=t.Bitcoin;const{Point:f}=i;function a(e){return Buffer.from(e).toString("hex")}function s(e){return Buffer.from(e,"hex").toString().replace(/\0/g,"")}function p(e,t){return e.slice(t)+e.slice(0,t)}function u(e,t){return e.slice(-t)+e.slice(0,-t)}function d(e,t,c){if(e.length*Math.log2(t)>53)throw new Error(`Input too large ${e.length} ${Math.log2(t)}`);if(![2,10,16].includes(t)||![2,10,16].includes(c))throw new Error("ToBase or FromBase invalid in covertNumber.");if(2===t&&e.length%8!=0)throw new Error("Binary strings must be byte aligned.");if(16===t&&e.length%2!=0)throw new Error("Hex strings must be of even length.");const r=parseInt(e,t).toString(c);return 2===c?r.padStart(8*Math.ceil(r.length/8),"0"):16===c?r.padStart(2*Math.ceil(r.length/2),"0"):r}function x(e,t){const c=new RegExp(`.{1,${t}}`,"g");return e.match(c)||[]}function h(e){return x(e,2).map((e=>d(e,16,2))).join("")}function b(e){return x(e,8).map((e=>d(e,2,16))).join("")}function q(e){return e.toString(16).padStart(3,"0")}function l(e){return parseInt(e,16)}function g(e){if(62!==e.length)throw new Error("Input to hexToPublicKey must be of length 62");let t=!1;let c=0;let r;for(;!t;){if(c>=256)throw new Error("Something went wrong storing data");const n=c.toString(16).padStart(2,"0")+b(p(h(e).padStart(64,"0"),c));try{r=f.fromX(!1,n),t=!0}catch(e){c+=1}}if(!r)throw new Error("Something went wrong storing data");return new n(r)}function m(e){const t=e.point.getX().toString("hex").padStart(64,"0");const c=d(t.slice(0,2),16,10);const r=parseInt(c,10);return b(u(h(t.slice(2)),r))}function w(e=c,t=r){if("testnet"===t||"regtest"===t)return 1;if("BTC"===e)return 0;if("LTC"===e)return 2;if("DOGE"===e)return 3;if("BCH"===e)return 145;if("BSV"===e)return 236;throw new Error(`Unsupported chain ${e}`)}function E({purpose:e=44,coinType:t=2,account:c=0}={}){return`m/${e.toString()}'/${t.toString()}'/${c.toString()}'`}function T(e=c,t=r){return E({coinType:w(e,t)})}function S(){return Math.round(Math.random()*Math.pow(2,31))}function v({chain:e=c,network:t=r,account:n=S()}={}){return E({account:n,coinType:w(e,t)})}describe("utils",(()=>{describe("asciiToHex",(()=>{it("should convert a string to a hex",(()=>{e.expect(a("aaa")).eq("616161"),e.expect(a("111")).eq("313131"),e.expect(a("const s1 = 'Ã©'")).eq("636f6e7374207331203d2027c3a927"),e.expect(a("Ã©")).eq("c3a9"),e.expect(a("ðŸ‘©")).eq("f09f91a9")})),it("should be the inverse of hexToAscii",(()=>{e.expect(s(a("aaa"))).eq("aaa"),e.expect(s(a("111"))).eq("111"),e.expect(s(a("const s1 = 'Ã©'"))).eq("const s1 = 'Ã©'"),e.expect(s(a("Ã©"))).eq("Ã©"),e.expect(s(a("ðŸ‘©"))).eq("ðŸ‘©")}))})),describe("hexToAscii",(()=>{it("should convert a hex to a string",(()=>{e.expect(s("616161")).eq("aaa"),e.expect(s("313131")).eq("111"),e.expect(s("636f6e7374207331203d2027c3a927")).eq("const s1 = 'Ã©'"),e.expect(s("c3a9")).eq("Ã©"),e.expect(s("f09f91a9")).eq("ðŸ‘©")})),it("should be the inverse of asciiToHex",(()=>{e.expect(a(s("616161"))).eq("616161"),e.expect(a(s("313131"))).eq("313131"),e.expect(a(s("636f6e7374207331203d2027c3a927"))).eq("636f6e7374207331203d2027c3a927"),e.expect(a(s("c3a9"))).eq("c3a9")}))})),describe("intToHex",(()=>{it("should convert an integer to a hex",(()=>{e.expect(q(0)).eq("000"),e.expect(q(16)).eq("010"),e.expect(q(2048)).eq("800"),e.expect(q(Number.MAX_SAFE_INTEGER)).eq("1fffffffffffff"),e.expect(q(Number.MAX_SAFE_INTEGER+1)).eq("20000000000000"),e.expect(q(Number.MAX_VALUE)).eq("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")})),it("should be the inverse of hexToInt",(()=>{e.expect(l(q(0))).eq(0),e.expect(l(q(16))).eq(16),e.expect(l(q(Number.MAX_SAFE_INTEGER))).eq(Number.MAX_SAFE_INTEGER),e.expect(l(q(Number.MAX_SAFE_INTEGER+1))).eq(Number.MAX_SAFE_INTEGER+1),e.expect(l(q(Number.MAX_VALUE))).eq(Number.MAX_VALUE)}))})),describe("hexToInt",(()=>{it("should convert a hex to an integer",(()=>{e.expect(l("0")).eq(0),e.expect(l("10")).eq(16),e.expect(l("ff")).eq(255),e.expect(l("fff")).eq(4095),e.expect(l("ffff")).eq(65535),e.expect(l("1fffffffffffff")).eq(Number.MAX_SAFE_INTEGER),e.expect(l("20000000000000")).eq(Number.MAX_SAFE_INTEGER+1),e.expect(l("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")).eq(Number.MAX_VALUE)})),it("should be the inverse of hexToInt",(()=>{e.expect(q(l("0"))).eq("000"),e.expect(q(l("10"))).eq("010"),e.expect(q(l("1fffffffffffff"))).eq("1fffffffffffff"),e.expect(q(l("20000000000000"))).eq("20000000000000"),e.expect(q(l("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))).eq("fffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")}))})),describe("rotateRight",(()=>{it("should rotate a string",(()=>{e.expect(p("abcde",2)).eq("cdeab"),e.expect(p("abcde",5)).eq("abcde"),e.expect(p("abcde",0)).eq("abcde"),e.expect(p("73b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c9c",2)).eq("b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c9c73")})),it("should be the inverse of rotateLeft",(()=>{const t="abcdefg";e.expect(u(p(t,3),3)).eq(t)}))})),describe("rotateLeft",(()=>{it("should rotate a string",(()=>{e.expect(u("abcde",2)).eq("deabc"),e.expect(u("abcde",5)).eq("abcde"),e.expect(u("abcde",0)).eq("abcde"),e.expect(u("73b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c9c",2)).eq("9c73b438d64ad669ba462cd097a2e327c23c5716fb03b95272228726b1dd8c")})),it("should be the inverse of rotateRight",(()=>{const t="abcdefg";e.expect(p(u(t,3),3)).eq(t)}))})),describe("convertNumber",(()=>{it("should convert a binary string to hex",(()=>{e.expect(d("00000001",2,16)).eq("01"),e.expect(d("00000011",2,16)).eq("03"),e.expect(d("00000111",2,16)).eq("07"),e.expect(d("00001111",2,16)).eq("0f"),e.expect(d("00010000",2,16)).eq("10")})),it("should convert a hex string to binary",(()=>{e.expect(d("01",16,2)).eq("00000001"),e.expect(d("03",16,2)).eq("00000011"),e.expect(d("07",16,2)).eq("00000111"),e.expect(d("0f",16,2)).eq("00001111"),e.expect(d("10",16,2)).eq("00010000")})),it("should be able to compute the inverse",(()=>{const t="10";const c=d(t,16,2);e.expect(c).eq("00010000"),e.expect(d(d(t,16,2),2,16)).eq(t)})),it("should be able to compute the inverse of a large number",(()=>{const t="f".repeat(12);e.expect(d(d(t,16,2),2,16)).eq(t)})),it("should throw an error if the input is too large",(()=>{const t="f".repeat(14);e.expect((()=>d(t,16,2))).throws()}))})),describe("hexToBin",(()=>{it("should convert a hex string to a binary string",(()=>{e.expect(h("01")).eq("00000001"),e.expect(h("03")).eq("00000011"),e.expect(h("07")).eq("00000111"),e.expect(h("0f")).eq("00001111"),e.expect(h("10")).eq("00010000"),e.expect(h("f".repeat(14))).eq("1".repeat(56))}))})),describe("binToHex",(()=>{it("should convert a binary string to a hex string",(()=>{e.expect(b("00000001")).eq("01"),e.expect(b("00000011")).eq("03"),e.expect(b("00000111")).eq("07"),e.expect(b("00001111")).eq("0f"),e.expect((()=>b("1"))).throws("Binary strings must be byte aligned.")}))})),describe("chunkString",(()=>{it("should split up an array",(()=>{e.expect(x("1234567",2)).to.deep.eq(["12","34","56","7"]),e.expect(x("",2)).to.deep.eq([])}))})),describe("chunkArray",(()=>{it("should split up an array",(()=>{e.expect(function(e,t){const c=[];for(let t=0;t<e.length;t+=2)c.push(e.slice(t,t+2));return c}([1,2,3,4,5,6,7])).to.deep.eq([[1,2],[3,4],[5,6],[7]])}))})),describe("hexToPublicKey",(()=>{it("should convert a hex string to a public key without shifting",(()=>{const t=g(a("1").padStart(62,"0"));e.expect(t).to.not.be.undefined})),it("should convert a hex string to a public key with shifting",(()=>{const t=g(a("11").padStart(62,"0"));e.expect(t).to.not.be.undefined})),it("should throw an error if the input is not of length 62",(()=>{e.expect((()=>g("1"))).throws("Input to hexToPublicKey must be of length 62")}))})),describe("publicKeyToHex",(()=>{it("should work with a publicKeyToHex without rotating",(()=>{const t=a("11").padStart(62,"0");const c=m(g(t));e.expect(c).eq(t)})),it("should work with a publicKeyToHex with rotating",(()=>{const t="1".padStart(62,"0");const c=m(g(t));e.expect(c).eq(t)})),it("should work with a random input",(()=>{const t=(e=>{let t="";const c="abcdef0123456789";for(let e=0;e<62;e+=1)t+=c.charAt(Math.floor(Math.random()*c.length));return t})();const c=m(g(t));e.expect(c).eq(t)})),it("should perform round trip between ascii and a public key",(()=>{const t="qwerty";const c=s(m(g(a(t).padStart(62,"0"))));e.expect(c).to.be.deep.eq(t)})),it("should perform round trip between ascii and a public key",(()=>{const t="5b7b2261223a317d5d";const c=s(m(g(a(t).padStart(62,"0"))));e.expect(c).to.be.deep.eq(t)}))})),describe("getCoinType",(()=>{it("should work",(()=>{e.expect(w()).eq(1),e.expect(w("LTC","mainnet")).eq(2)}))})),describe("getPath",(()=>{it("should work",(()=>{e.expect(T()).eq("m/44'/1'/0'"),e.expect(T("LTC","mainnet")).eq("m/44'/2'/0'")}))})),describe("getIndexPath",(()=>{it("should work",(()=>{e.expect(v()).to.be.an("string"),e.expect(v({chain:"LTC",network:"mainnet",account:123})).eq("m/44'/2'/123'")}))})),describe("getRandomIntegerInsecure",(()=>{it("should work",(()=>{e.expect(S()).to.be.an("number")}))}))}));
